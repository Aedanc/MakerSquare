<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

using Engine;
using Engine.System.Rule;
using Engine.System.Movement;
using System;
using Engine.System.Collision;
using tainicom.Aether.Physics2D.Dynamics;
using System.Collections.Generic;
using System.Diagnostics;
using Engine.System.Graphics;
using Engine.System.Input;
using Microsoft.Xna.Framework;
using tainicom.Aether.Physics2D.Dynamics.Contacts;
using Vector2 = Microsoft.Xna.Framework.Vector2;

namespace Game.Prefabs
{	
    [Serializable]
    public class Breakout: Entity
    {
        public List<Brick> wall;
        bool activeWatcher;
        Ball ball;
		public int nbBrick = 0;

        public Breakout()
        {
            Name = "Breakout";
            wall = new List<Brick>();
            AddComponent(new RuleComponent(this));
            activeWatcher = false;
            GetComponent<RuleComponent>().WatcherVarEntity("nbBall", 0, "Breakout", QuitGame, "none", this, "none");
        }

        public void BreakBricks(string EntityWatched, Entity EntityWatcher, string VarName)
        {
            ((Brick)EntityWatcher).AddScore(EntityWatched, this, VarName);
            nbBrick -= 1;
           ((Brick)EntityWatcher).marked_for_deletion = true;
        }

        public void QuitGame(string EntityWatched, Entity EntityWatcher, string VarName)
        {
            Engine.Core.Game.Instance.Exit()
        }
        
    }

	[Serializable]
    public class Ball : Entity
    {     
        public Ball() : base(true)
        {
            Name = "Ball";
            // Components
            AddComponent(new RuleComponent(this));
             AddComponent(new MovementComponent(this));
            AddComponent(new Engine.System.Graphics.SpriteComponent(this, "<#= _ball.spritename #>", true));
            AddComponent(CollisionComponentBuilder.CreateNew()
                .Init(this, 25)
                .SetRestitution(1f)
                .SetCategoriesCollision(Category.Cat1)
                .SetCollidesWith(Category.All)
                .SetBodyType(BodyType.Dynamic)
                .Build());
        }
        public void RemoveLife(string EntityWatched, Entity EntityWatcher, string VarName)
        {
            GetComponent<RuleComponent>().SetVariablevalue(EntityWatched, VarName, (int)(GetComponent<RuleComponent>().GetVariableinVarTable(VarName)) - 1);
        }
    }

	[Serializable]
    public class Brick : Entity
    {
        public int ScoreGiven;

        public Brick(Breakout breakout, Vector2 pos, string spritename, int score) : base(true)
        {
            Transform.x = pos.x;
            Transform.y = pos.y;
			ScoreGiven = score;
            AddComponent(new Engine.System.Graphics.SpriteComponent(this, spritename, true));			
			var sprite = GetComponent<Engine.System.Graphics.SpriteComponent>().Controller;   
            AddComponent(new RuleComponent(this));
            AddComponent(CollisionComponentBuilder.CreateNew()
                .Init(this, new Vector2(sprite.Width, sprite.Height))
                .SetCollidesWith(Category.Cat1)
                .SetCategoriesCollision(Category.Cat2)
                .SetBodyType(BodyType.Static)
                .Build());
            breakout.wall.Add(this);
            breakout.nbBrick += 1;
            Name = "Brick" + breakout.nbBrick;
			var msg = new RuleManager.EngineMessage();
            msg.entitybase = EntityManager.GetEntity("Ball");
            msg.entityFocus = this;
            msg.Action = RuleManager.ActionEngine.Collision;

            GetComponent<RuleComponent>().WatcherActionEngine(msg, BreakBricks, "brick", this, "breakout");            
        }
       
        public void AddScore(string EntityWatched, Entity EntityWatcher, string VarName)
        {
            ((Breakout)EntityWatcher).score += ScoreGiven;
            Console.WriteLine("Score : " + ((Breakout)EntityWatcher).score);
       }

        public void BreakBricks(string EntityWatched, Entity EntityWatcher, string VarName)
        {
            this.AddScore(EntityWatched, EntityWatcher, VarName);
            ((Breakout)EntityWatcher).nbBrick -= 1;
            this.marked_for_deletion = true;
        }

	[Serializable]
    class Bat : Entity
    {
        public Bat() : base(true)
        {
            AddComponent(new RuleComponent(this));
            var input = new InputComponent(this);
            AddComponent(new MovementComponent(this));
            AddComponent(new SpriteComponent(this, "<#= _bat.spritename #>", true));
			var sprite = GetComponent<Engine.System.Graphics.SpriteComponent>().Controller;            
             List<OnCollisionEventHandler> fixtureOnCollisionEventHandlers = new List<OnCollisionEventHandler>();
            fixtureOnCollisionEventHandlers.Add(delegate(Fixture sender, Fixture other, Contact contact)
            {
                Vector2 linear = other.Body.LinearVelocity;
                if (linear.Y >= 0)
                    other.Body.LinearVelocity = new Vector2(-100, -70);
                else
                    other.Body.LinearVelocity = new Vector2(-100, 70);
                return true;
            });
            fixtureOnCollisionEventHandlers.Add(delegate(Fixture sender, Fixture other, Contact contact)
            {
                Vector2 linear = other.Body.LinearVelocity;
                if (linear.Y >= 0)
                    other.Body.LinearVelocity = new Vector2(0, -170);
                else
                    other.Body.LinearVelocity = new Vector2(0, 170);
                return true;
            });
            fixtureOnCollisionEventHandlers.Add(delegate(Fixture sender, Fixture other, Contact contact)
            {
                Vector2 linear = other.Body.LinearVelocity;
                if (linear.Y >= 0)
                    other.Body.LinearVelocity = new Vector2(100, -70);
                else
                    other.Body.LinearVelocity = new Vector2(100, 70);
                return true;
            });
            AddComponent(CollisionComponentBuilder.CreateNew()
                .Init(this, new Vector2(sprite.Width, sprite.Height))
                .SetBodyType(BodyType.Dynamic)
                .SetCollidesWith(Category.All)
                .SetCategoriesCollision(Category.Cat3)
                .SetHitBoxDivide(3)
                .SetFixtureOnCollisionEventHandlers(fixtureOnCollisionEventHandlers)
                .SetFriction(0f)
                .Build());

				           ActionDelegate move_right_down = (entity, dict) => {
                GetComponent<MovementComponent>().MoveToRight();
            };
            
            ActionDelegate move_right_up = (entity, dict) =>
            {
                GetComponent<MovementComponent>().StopMoveToDirection(MovementComponent.DirectionMovement.RIGHT);
            };
            ActionDelegate move_left_down = (entity, dict) => {
                GetComponent<MovementComponent>().MoveToLeft();
            };
            
            ActionDelegate move_left_up = (entity, dict) =>
            {
                GetComponent<MovementComponent>().StopMoveToDirection(MovementComponent.DirectionMovement.LEFT);
            };

            ActionDelegate launch_ball = (entity, dict) =>
            {
                EntityManager.GetEntity("Breakout").GetComponent<RuleComponent>().WatcherVarEntity("score", 0, "Breakout", SpawnBall, "Ball", this, "none");
            };

            ActionDelegate exit = (entity, dict) => Engine.Core.Game.Instance.Exit();
            input.AddAction("move_right", OnKey.DOWN, Ultraviolet.Input.Key.Right, null, move_right_down);
            input.AddAction("move_right", OnKey.UP, Ultraviolet.Input.Key.Right, null, move_right_up);
            input.AddAction("move_left", OnKey.DOWN, Ultraviolet.Input.Key.Left, null, move_left_down);
            input.AddAction("move_left", OnKey.UP, Ultraviolet.Input.Key.Left, null, move_left_up);
            input.AddAction("exit", OnKey.PRESSED, Ultraviolet.Input.Key.Escape, null, exit);
            input.AddAction("launch_ball", OnKey.PRESSED, Ultraviolet.Input.Key.Space, null, launch_ball);
            AddComponent(input);
             }

		public void SpawnBall(string EntityWatched, Entity EntityWatcher, string VarName)
        {
            Debug.WriteLine("SpawnBall");
            var mvt = EntityManager.GetEntity("Ball").GetComponent<MovementComponent>();
            mvt.forceAmount = 3000;
            mvt.Direction = new Vector2(0, -1);
            EntityManager.GetEntity("Breakout").GetComponent<RuleComponent>().RemoveWatcher(SpawnBall);
        }
    }

	[Serializable]
    public class InvisibleWall : Entity
    {
        public InvisibleWall(Vector2 pos, Vector2 size, bool destroyBallHandler = false) : base(true)
        {
            //Initial Placement
            Transform.x = pos.x;
            Transform.y = pos.y;
            
            //Component
            AddComponent(new RuleComponent(this));
            var builder = CollisionComponentBuilder.CreateNew();
            builder.Init(this, new Vector2(size.x, size.y));
                .SetBodyType(BodyType.Static)
                .SetCategoriesCollision(Category.Cat2)
                .SetFriction(0f)
                .SetCollidesWith(Category.All);
            if (destroyBallHandler)
                builder.AddOnCollisionEventHandler(delegate(Fixture sender, Fixture other, Contact contact)
                {
                    EntityManager.GetAllEntities().Find(i => i.Guid == (Guid)other.Body.Tag).marked_for_deletion = true;
                    ((Breakout)EntityManager.GetEntity("Breakout")).nbBall -= 1;
                    return true;
                });
            AddComponent(builder.Build());
        }
    }
}
};