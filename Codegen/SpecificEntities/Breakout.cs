// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Codegen.SpecificEntities
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\Users\Hurlu\Code\MakersSquare\Codegen\SpecificEntities\Breakout.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class Breakout : BreakoutBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\nusing Engine;\r\nusing Engine.System.Rule;\r\nusing Engine.System.Movement;\r\nusing " +
                    "System;\r\nusing Engine.System.Collision;\r\nusing tainicom.Aether.Physics2D.Dynamic" +
                    "s;\r\nusing System.Collections.Generic;\r\nusing System.Diagnostics;\r\nusing Engine.S" +
                    "ystem.Graphics;\r\nusing Engine.System.Input;\r\nusing Microsoft.Xna.Framework;\r\nusi" +
                    "ng tainicom.Aether.Physics2D.Dynamics.Contacts;\r\nusing Vector2 = Microsoft.Xna.F" +
                    "ramework.Vector2;\r\n\r\nnamespace Game.Prefabs\r\n{\t\r\n    [Serializable]\r\n    public " +
                    "class Breakout: Entity\r\n    {\r\n        public List<Brick> wall;\r\n        bool ac" +
                    "tiveWatcher;\r\n        Ball ball;\r\n\t\tpublic int nbBrick = 0;\r\n\r\n        public Br" +
                    "eakout()\r\n        {\r\n            Name = \"Breakout\";\r\n            wall = new List" +
                    "<Brick>();\r\n            AddComponent(new RuleComponent(this));\r\n            acti" +
                    "veWatcher = false;\r\n            GetComponent<RuleComponent>().WatcherVarEntity(\"" +
                    "nbBall\", 0, \"Breakout\", QuitGame, \"none\", this, \"none\");\r\n        }\r\n\r\n        p" +
                    "ublic void BreakBricks(string EntityWatched, Entity EntityWatcher, string VarNam" +
                    "e)\r\n        {\r\n            ((Brick)EntityWatcher).AddScore(EntityWatched, this, " +
                    "VarName);\r\n            nbBrick -= 1;\r\n           ((Brick)EntityWatcher).marked_f" +
                    "or_deletion = true;\r\n        }\r\n\r\n        public void QuitGame(string EntityWatc" +
                    "hed, Entity EntityWatcher, string VarName)\r\n        {\r\n            Engine.Core.G" +
                    "ame.Instance.Exit()\r\n        }\r\n        \r\n    }\r\n\r\n\t[Serializable]\r\n    public c" +
                    "lass Ball : Entity\r\n    {     \r\n        public Ball() : base(true)\r\n        {\r\n " +
                    "           Name = \"Ball\";\r\n            // Components\r\n            AddComponent(n" +
                    "ew RuleComponent(this));\r\n             AddComponent(new MovementComponent(this))" +
                    ";\r\n            AddComponent(new Engine.System.Graphics.SpriteComponent(this, \"");
            
            #line 63 "D:\Users\Hurlu\Code\MakersSquare\Codegen\SpecificEntities\Breakout.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_ball.spritename));
            
            #line default
            #line hidden
            this.Write("\", true));\r\n            AddComponent(CollisionComponentBuilder.CreateNew()\r\n     " +
                    "           .Init(this, 25)\r\n                .SetRestitution(1f)\r\n               " +
                    " .SetCategoriesCollision(Category.Cat1)\r\n                .SetCollidesWith(Catego" +
                    "ry.All)\r\n                .SetBodyType(BodyType.Dynamic)\r\n                .Build(" +
                    "));\r\n        }\r\n        public void RemoveLife(string EntityWatched, Entity Enti" +
                    "tyWatcher, string VarName)\r\n        {\r\n            GetComponent<RuleComponent>()" +
                    ".SetVariablevalue(EntityWatched, VarName, (int)(GetComponent<RuleComponent>().Ge" +
                    "tVariableinVarTable(VarName)) - 1);\r\n        }\r\n    }\r\n\r\n\t[Serializable]\r\n    pu" +
                    "blic class Brick : Entity\r\n    {\r\n        public int ScoreGiven;\r\n\r\n        publ" +
                    "ic Brick(Breakout breakout, Vector2 pos, string spritename, int score) : base(tr" +
                    "ue)\r\n        {\r\n            Transform.x = pos.x;\r\n            Transform.y = pos." +
                    "y;\r\n\t\t\tScoreGiven = score;\r\n            AddComponent(new Engine.System.Graphics." +
                    "SpriteComponent(this, spritename, true));\t\t\t\r\n\t\t\tvar sprite = GetComponent<Engin" +
                    "e.System.Graphics.SpriteComponent>().Controller;   \r\n            AddComponent(ne" +
                    "w RuleComponent(this));\r\n            AddComponent(CollisionComponentBuilder.Crea" +
                    "teNew()\r\n                .Init(this, new Vector2(sprite.Width, sprite.Height))\r\n" +
                    "                .SetCollidesWith(Category.Cat1)\r\n                .SetCategoriesC" +
                    "ollision(Category.Cat2)\r\n                .SetBodyType(BodyType.Static)\r\n        " +
                    "        .Build());\r\n            breakout.wall.Add(this);\r\n            breakout.n" +
                    "bBrick += 1;\r\n            Name = \"Brick\" + breakout.nbBrick;\r\n\t\t\tvar msg = new R" +
                    "uleManager.EngineMessage();\r\n            msg.entitybase = EntityManager.GetEntit" +
                    "y(\"Ball\");\r\n            msg.entityFocus = this;\r\n            msg.Action = RuleMa" +
                    "nager.ActionEngine.Collision;\r\n\r\n            GetComponent<RuleComponent>().Watch" +
                    "erActionEngine(msg, BreakBricks, \"brick\", this, \"breakout\");            \r\n      " +
                    "  }\r\n       \r\n        public void AddScore(string EntityWatched, Entity EntityWa" +
                    "tcher, string VarName)\r\n        {\r\n            ((Breakout)EntityWatcher).score +" +
                    "= ScoreGiven;\r\n            Console.WriteLine(\"Score : \" + ((Breakout)EntityWatch" +
                    "er).score);\r\n       }\r\n\r\n        public void BreakBricks(string EntityWatched, E" +
                    "ntity EntityWatcher, string VarName)\r\n        {\r\n            this.AddScore(Entit" +
                    "yWatched, EntityWatcher, VarName);\r\n            ((Breakout)EntityWatcher).nbBric" +
                    "k -= 1;\r\n            this.marked_for_deletion = true;\r\n        }\r\n\r\n\t[Serializab" +
                    "le]\r\n    class Bat : Entity\r\n    {\r\n        public Bat() : base(true)\r\n        {" +
                    "\r\n            AddComponent(new RuleComponent(this));\r\n            var input = ne" +
                    "w InputComponent(this);\r\n            AddComponent(new MovementComponent(this));\r" +
                    "\n            AddComponent(new SpriteComponent(this, \"");
            
            #line 129 "D:\Users\Hurlu\Code\MakersSquare\Codegen\SpecificEntities\Breakout.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_bat.spritename));
            
            #line default
            #line hidden
            this.Write("\", true));\r\n\t\t\tvar sprite = GetComponent<Engine.System.Graphics.SpriteComponent>(" +
                    ").Controller;            \r\n             List<OnCollisionEventHandler> fixtureOnC" +
                    "ollisionEventHandlers = new List<OnCollisionEventHandler>();\r\n            fixtur" +
                    "eOnCollisionEventHandlers.Add(delegate(Fixture sender, Fixture other, Contact co" +
                    "ntact)\r\n            {\r\n                Vector2 linear = other.Body.LinearVelocit" +
                    "y;\r\n                if (linear.Y >= 0)\r\n                    other.Body.LinearVel" +
                    "ocity = new Vector2(-100, -70);\r\n                else\r\n                    other" +
                    ".Body.LinearVelocity = new Vector2(-100, 70);\r\n                return true;\r\n   " +
                    "         });\r\n            fixtureOnCollisionEventHandlers.Add(delegate(Fixture s" +
                    "ender, Fixture other, Contact contact)\r\n            {\r\n                Vector2 l" +
                    "inear = other.Body.LinearVelocity;\r\n                if (linear.Y >= 0)\r\n        " +
                    "            other.Body.LinearVelocity = new Vector2(0, -170);\r\n                e" +
                    "lse\r\n                    other.Body.LinearVelocity = new Vector2(0, 170);\r\n     " +
                    "           return true;\r\n            });\r\n            fixtureOnCollisionEventHan" +
                    "dlers.Add(delegate(Fixture sender, Fixture other, Contact contact)\r\n            " +
                    "{\r\n                Vector2 linear = other.Body.LinearVelocity;\r\n                " +
                    "if (linear.Y >= 0)\r\n                    other.Body.LinearVelocity = new Vector2(" +
                    "100, -70);\r\n                else\r\n                    other.Body.LinearVelocity " +
                    "= new Vector2(100, 70);\r\n                return true;\r\n            });\r\n        " +
                    "    AddComponent(CollisionComponentBuilder.CreateNew()\r\n                .Init(th" +
                    "is, new Vector2(sprite.Width, sprite.Height))\r\n                .SetBodyType(Body" +
                    "Type.Dynamic)\r\n                .SetCollidesWith(Category.All)\r\n                ." +
                    "SetCategoriesCollision(Category.Cat3)\r\n                .SetHitBoxDivide(3)\r\n    " +
                    "            .SetFixtureOnCollisionEventHandlers(fixtureOnCollisionEventHandlers)" +
                    "\r\n                .SetFriction(0f)\r\n                .Build());\r\n\r\n\t\t\t\t          " +
                    " ActionDelegate move_right_down = (entity, dict) => {\r\n                GetCompon" +
                    "ent<MovementComponent>().MoveToRight();\r\n            };\r\n            \r\n         " +
                    "   ActionDelegate move_right_up = (entity, dict) =>\r\n            {\r\n            " +
                    "    GetComponent<MovementComponent>().StopMoveToDirection(MovementComponent.Dire" +
                    "ctionMovement.RIGHT);\r\n            };\r\n            ActionDelegate move_left_down" +
                    " = (entity, dict) => {\r\n                GetComponent<MovementComponent>().MoveTo" +
                    "Left();\r\n            };\r\n            \r\n            ActionDelegate move_left_up =" +
                    " (entity, dict) =>\r\n            {\r\n                GetComponent<MovementComponen" +
                    "t>().StopMoveToDirection(MovementComponent.DirectionMovement.LEFT);\r\n           " +
                    " };\r\n\r\n            ActionDelegate launch_ball = (entity, dict) =>\r\n            {" +
                    "\r\n                EntityManager.GetEntity(\"Breakout\").GetComponent<RuleComponent" +
                    ">().WatcherVarEntity(\"score\", 0, \"Breakout\", SpawnBall, \"Ball\", this, \"none\");\r\n" +
                    "            };\r\n\r\n            ActionDelegate exit = (entity, dict) => Engine.Cor" +
                    "e.Game.Instance.Exit();\r\n            input.AddAction(\"move_right\", OnKey.DOWN, U" +
                    "ltraviolet.Input.Key.Right, null, move_right_down);\r\n            input.AddAction" +
                    "(\"move_right\", OnKey.UP, Ultraviolet.Input.Key.Right, null, move_right_up);\r\n   " +
                    "         input.AddAction(\"move_left\", OnKey.DOWN, Ultraviolet.Input.Key.Left, nu" +
                    "ll, move_left_down);\r\n            input.AddAction(\"move_left\", OnKey.UP, Ultravi" +
                    "olet.Input.Key.Left, null, move_left_up);\r\n            input.AddAction(\"exit\", O" +
                    "nKey.PRESSED, Ultraviolet.Input.Key.Escape, null, exit);\r\n            input.AddA" +
                    "ction(\"launch_ball\", OnKey.PRESSED, Ultraviolet.Input.Key.Space, null, launch_ba" +
                    "ll);\r\n            AddComponent(input);\r\n             }\r\n\r\n\t\tpublic void SpawnBal" +
                    "l(string EntityWatched, Entity EntityWatcher, string VarName)\r\n        {\r\n      " +
                    "      Debug.WriteLine(\"SpawnBall\");\r\n            var mvt = EntityManager.GetEnti" +
                    "ty(\"Ball\").GetComponent<MovementComponent>();\r\n            mvt.forceAmount = 300" +
                    "0;\r\n            mvt.Direction = new Vector2(0, -1);\r\n            EntityManager.G" +
                    "etEntity(\"Breakout\").GetComponent<RuleComponent>().RemoveWatcher(SpawnBall);\r\n  " +
                    "      }\r\n    }\r\n\r\n\t[Serializable]\r\n    public class InvisibleWall : Entity\r\n    " +
                    "{\r\n        public InvisibleWall(Vector2 pos, Vector2 size, bool destroyBallHandl" +
                    "er = false) : base(true)\r\n        {\r\n            //Initial Placement\r\n          " +
                    "  Transform.x = pos.x;\r\n            Transform.y = pos.y;\r\n            \r\n        " +
                    "    //Component\r\n            AddComponent(new RuleComponent(this));\r\n           " +
                    " var builder = CollisionComponentBuilder.CreateNew();\r\n            builder.Init(" +
                    "this, new Vector2(size.x, size.y));\r\n                .SetBodyType(BodyType.Stati" +
                    "c)\r\n                .SetCategoriesCollision(Category.Cat2)\r\n                .Set" +
                    "Friction(0f)\r\n                .SetCollidesWith(Category.All);\r\n            if (d" +
                    "estroyBallHandler)\r\n                builder.AddOnCollisionEventHandler(delegate(" +
                    "Fixture sender, Fixture other, Contact contact)\r\n                {\r\n            " +
                    "        EntityManager.GetAllEntities().Find(i => i.Guid == (Guid)other.Body.Tag)" +
                    ".marked_for_deletion = true;\r\n                    ((Breakout)EntityManager.GetEn" +
                    "tity(\"Breakout\")).nbBall -= 1;\r\n                    return true;\r\n              " +
                    "  });\r\n            AddComponent(builder.Build());\r\n        }\r\n    }\r\n}\r\n};");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class BreakoutBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
